'use client';

// @ts-expect-error - Admin component needs interface update for ValidationResult structure
import React, { useState, useMemo } from 'react';
import {
  ValidationResult,
  CircularReferenceError,
  ValidationError,
} from '../../types';

// Placeholder types for missing interfaces
type ValidationConflict = any;
type MissingRequirement = any;

interface ValidationErrorDisplayProps {
  validationResult: ValidationResult;
  onFixError?: (error: ValidationError, fix: any) => Promise<void>;
  onDismissError?: (errorId: string) => void;
  showSuggestions?: boolean;
  compactMode?: boolean;
}

interface ErrorGroup {
  category: string;
  errors: ValidationError[];
  severity: 'error' | 'warning' | 'info';
  count: number;
}

type ErrorCategory =
  | 'conflicts'
  | 'missing'
  | 'circular'
  | 'dependencies'
  | 'schema'
  | 'other';

export function ValidationErrorDisplay({
  validationResult,
  onFixError,
  onDismissError,
  showSuggestions = true,
  compactMode = false,
}: ValidationErrorDisplayProps) {
  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(
    new Set(['conflicts'])
  );
  const [selectedError, setSelectedError] = useState<ValidationError | null>(
    null
  );
  const [showFixModal, setShowFixModal] = useState(false);

  // Group errors by category
  const errorGroups = useMemo((): ErrorGroup[] => {
    const groups: Record<ErrorCategory, ErrorGroup> = {
      conflicts: {
        category: 'Conflicts',
        errors: [],
        severity: 'error',
        count: 0,
      },
      missing: {
        category: 'Missing Requirements',
        errors: [],
        severity: 'warning',
        count: 0,
      },
      circular: {
        category: 'Circular References',
        errors: [],
        severity: 'error',
        count: 0,
      },
      dependencies: {
        category: 'Dependency Issues',
        errors: [],
        severity: 'warning',
        count: 0,
      },
      schema: {
        category: 'Schema Violations',
        errors: [],
        severity: 'error',
        count: 0,
      },
      other: {
        category: 'Other Issues',
        errors: [],
        severity: 'info',
        count: 0,
      },
    };

    // Process conflicts
    validationResult.conflicts?.forEach((conflict, index) => {
      groups.conflicts.errors.push({
        id: `conflict-${index}`,
        type: 'conflict',
        message: conflict.description,
        field: conflict.conflicting_elements?.[0],
        severity: 'error',
        data: conflict,
      });
    });

    // Process missing requirements
    validationResult.missing_requirements?.forEach((missing, index) => {
      groups.missing.errors.push({
        id: `missing-${index}`,
        type: 'missing_requirement',
        message: `Missing ${missing.type}: ${missing.name}`,
        field: missing.name,
        severity: 'warning',
        data: missing,
      });
    });

    // Process circular references
    validationResult.circular_references?.forEach((circular, index) => {
      groups.circular.errors.push({
        id: `circular-${index}`,
        type: 'circular_reference',
        message: `Circular reference detected: ${
          circular.path?.join(' ‚Üí ') || 'Unknown path'
        }`,
        field: circular.involved_elements?.[0],
        severity: 'error',
        data: circular,
      });
    });

    // Process general errors
    validationResult.errors?.forEach((error, index) => {
      const category = error.includes('dependency')
        ? 'dependencies'
        : error.includes('schema')
        ? 'schema'
        : 'other';

      groups[category].errors.push({
        id: `error-${index}`,
        type: 'general',
        message: error,
        severity: category === 'schema' ? 'error' : 'warning',
      });
    });

    // Update counts and filter out empty groups
    return Object.values(groups)
      .map(group => ({ ...group, count: group.errors.length }))
      .filter(group => group.count > 0);
  }, [validationResult]);

  // Get severity color classes
  const getSeverityClasses = (severity: 'error' | 'warning' | 'info') => {
    switch (severity) {
      case 'error':
        return {
          bg: 'bg-red-50',
          border: 'border-red-200',
          text: 'text-red-800',
          icon: 'üö®',
          badge: 'bg-red-100 text-red-800',
        };
      case 'warning':
        return {
          bg: 'bg-yellow-50',
          border: 'border-yellow-200',
          text: 'text-yellow-800',
          icon: '‚ö†Ô∏è',
          badge: 'bg-yellow-100 text-yellow-800',
        };
      case 'info':
        return {
          bg: 'bg-blue-50',
          border: 'border-blue-200',
          text: 'text-blue-800',
          icon: '‚ÑπÔ∏è',
          badge: 'bg-blue-100 text-blue-800',
        };
    }
  };

  // Toggle category expansion
  const toggleCategory = (category: string) => {
    setExpandedCategories(prev => {
      const newSet = new Set(prev);
      if (newSet.has(category)) {
        newSet.delete(category);
      } else {
        newSet.add(category);
      }
      return newSet;
    });
  };

  // Generate suggested fixes
  const getSuggestedFixes = (error: ValidationError) => {
    const fixes: Array<{ label: string; action: any; description: string }> =
      [];

    if (error.type === 'conflict' && error.data) {
      const conflict = error.data as ValidationConflict;

      if (
        conflict.conflicting_elements &&
        conflict.conflicting_elements.length >= 2
      ) {
        fixes.push({
          label: `Remove ${conflict.conflicting_elements[1]}`,
          action: {
            type: 'remove_element',
            element: conflict.conflicting_elements[1],
          },
          description: `Remove the conflicting element to resolve the conflict`,
        });

        fixes.push({
          label: `Keep ${conflict.conflicting_elements[1]} and remove ${conflict.conflicting_elements[0]}`,
          action: {
            type: 'remove_element',
            element: conflict.conflicting_elements[0],
          },
          description: `Keep the second element and remove the first one`,
        });
      }

      if (conflict.suggested_resolution) {
        fixes.push({
          label: 'Apply suggested resolution',
          action: {
            type: 'apply_suggestion',
            resolution: conflict.suggested_resolution,
          },
          description: conflict.suggested_resolution,
        });
      }
    }

    if (error.type === 'missing_requirement' && error.data) {
      const missing = error.data as MissingRequirement;

      fixes.push({
        label: `Add ${missing.name}`,
        action: { type: 'add_requirement', requirement: missing },
        description: `Add the missing ${missing.type} to satisfy the requirement`,
      });

      if (missing.alternatives && missing.alternatives.length > 0) {
        missing.alternatives.forEach((alt, index) => {
          fixes.push({
            label: `Use ${alt} instead`,
            action: {
              type: 'use_alternative',
              alternative: alt,
              original: missing.name,
            },
            description: `Replace with the alternative option`,
          });
        });
      }
    }

    if (error.type === 'circular_reference' && error.data) {
      const circular = error.data as CircularReferenceError;

      if (circular.involved_elements && circular.involved_elements.length > 0) {
        // Suggest removing the weakest link
        const weakestElement =
          circular.involved_elements[circular.involved_elements.length - 1];
        fixes.push({
          label: `Remove dependency to ${weakestElement}`,
          action: { type: 'break_cycle', element: weakestElement },
          description: `Break the circular reference by removing this dependency`,
        });
      }
    }

    return fixes;
  };

  // Apply suggested fix
  const applyFix = async (error: ValidationError, fix: any) => {
    if (!onFixError) {
      return;
    }

    try {
      await onFixError(error, fix);
      setSelectedError(null);
      setShowFixModal(false);
    } catch (err) {
      console.error('Failed to apply fix:', err);
    }
  };

  // Render compact mode
  if (compactMode) {
    const totalErrors = errorGroups.reduce(
      (sum, group) => sum + group.count,
      0
    );
    const hasErrors = errorGroups.some(
      group => group.severity === 'error' && group.count > 0
    );

    if (!hasErrors && totalErrors === 0) {
      return (
        <div className="flex items-center space-x-2 text-sm text-green-600">
          <span>‚úÖ</span>
          <span>All validations passed</span>
        </div>
      );
    }

    return (
      <div className="flex items-center space-x-3">
        {errorGroups.map(group => {
          const classes = getSeverityClasses(group.severity);
          return (
            <div key={group.category} className="flex items-center space-x-1">
              <span
                className={`px-2 py-1 text-xs rounded-full ${classes.badge}`}
              >
                {group.count} {group.category}
              </span>
            </div>
          );
        })}
      </div>
    );
  }

  // Render full display
  return (
    <div className="bg-white rounded-lg shadow-lg">
      {/* Header */}
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-gray-900">
            Validation Results
          </h3>
          <div className="flex items-center space-x-2">
            {validationResult.is_valid ? (
              <span className="px-3 py-1 text-sm bg-green-100 text-green-800 rounded-full">
                ‚úÖ Valid
              </span>
            ) : (
              <span className="px-3 py-1 text-sm bg-red-100 text-red-800 rounded-full">
                ‚ùå Invalid
              </span>
            )}
          </div>
        </div>

        {(validationResult as any).message && (
          <p className="text-sm text-gray-600 mt-2">
            {(validationResult as any).message}
          </p>
        )}
      </div>

      {/* Summary Statistics */}
      <div className="px-6 py-3 bg-gray-50 border-b border-gray-200">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          {errorGroups.map(group => {
            const classes = getSeverityClasses(group.severity);
            return (
              <div key={group.category} className="flex items-center space-x-2">
                <span>{classes.icon}</span>
                <span className="text-gray-600">{group.category}:</span>
                <span className={`font-medium ${classes.text}`}>
                  {group.count}
                </span>
              </div>
            );
          })}
        </div>
      </div>

      {/* Error Groups */}
      <div className="divide-y divide-gray-200">
        {errorGroups.map(group => {
          const isExpanded = expandedCategories.has(group.category);
          const classes = getSeverityClasses(group.severity);

          return (
            <div key={group.category}>
              {/* Group Header */}
              <button
                onClick={() => toggleCategory(group.category)}
                className="w-full px-6 py-4 text-left hover:bg-gray-50 transition-colors"
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <span className="text-lg">{classes.icon}</span>
                    <span className="font-medium text-gray-900">
                      {group.category}
                    </span>
                    <span
                      className={`px-2 py-1 text-xs rounded-full ${classes.badge}`}
                    >
                      {group.count}
                    </span>
                  </div>
                  <svg
                    className={`w-5 h-5 text-gray-400 transition-transform ${
                      isExpanded ? 'rotate-90' : ''
                    }`}
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                      clipRule="evenodd"
                    />
                  </svg>
                </div>
              </button>

              {/* Group Content */}
              {isExpanded && (
                <div className="px-6 pb-4">
                  <div className="space-y-3">
                    {group.errors.map(error => (
                      <div
                        key={(error as any).id}
                        className={`border rounded-lg p-4 ${classes.bg} ${classes.border}`}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <p
                              className={`text-sm font-medium ${classes.text}`}
                            >
                              {error.message}
                            </p>

                            {error.field && (
                              <p className="text-xs text-gray-600 mt-1">
                                Field: {error.field}
                              </p>
                            )}

                            {error.details && (
                              <p className="text-xs text-gray-600 mt-1">
                                {error.details}
                              </p>
                            )}
                          </div>

                          <div className="flex items-center space-x-2 ml-4">
                            {showSuggestions && onFixError && (
                              <button
                                onClick={() => {
                                  setSelectedError(error);
                                  setShowFixModal(true);
                                }}
                                className="px-3 py-1 text-xs text-indigo-600 hover:text-indigo-800"
                              >
                                Fix
                              </button>
                            )}

                            {onDismissError && (
                              <button
                                onClick={() => onDismissError(error.id)}
                                className="px-3 py-1 text-xs text-gray-600 hover:text-gray-800"
                              >
                                Dismiss
                              </button>
                            )}
                          </div>
                        </div>

                        {/* Additional Error Data */}
                        {error.type === 'conflict' && error.data && (
                          <div className="mt-3 text-xs">
                            <strong>Conflicting elements:</strong>{' '}
                            {(
                              error.data as ValidationConflict
                            ).conflicting_elements?.join(', ')}
                          </div>
                        )}

                        {error.type === 'circular_reference' && error.data && (
                          <div className="mt-3 text-xs">
                            <strong>Reference path:</strong>{' '}
                            {(error.data as CircularReferenceError).path?.join(
                              ' ‚Üí '
                            )}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* No Errors State */}
      {errorGroups.length === 0 && (
        <div className="px-6 py-12 text-center">
          <div className="text-6xl mb-4">‚úÖ</div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            No validation errors found
          </h3>
          <p className="text-gray-600">
            All validation checks passed successfully.
          </p>
        </div>
      )}

      {/* Fix Modal */}
      {showFixModal && selectedError && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-96 overflow-y-auto">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              Suggested Fixes
            </h3>

            <div className="mb-4 p-3 bg-gray-50 rounded-lg">
              <p className="text-sm font-medium text-gray-900 mb-1">Error:</p>
              <p className="text-sm text-gray-700">{selectedError.message}</p>
            </div>

            <div className="space-y-3 mb-6">
              {getSuggestedFixes(selectedError).map((fix, index) => (
                <div
                  key={index}
                  className="border border-gray-200 rounded-lg p-4"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <h4 className="text-sm font-medium text-gray-900 mb-1">
                        {fix.label}
                      </h4>
                      <p className="text-xs text-gray-600">{fix.description}</p>
                    </div>

                    <button
                      onClick={() => applyFix(selectedError, fix.action)}
                      className="ml-3 px-3 py-1 text-sm bg-indigo-600 text-white rounded hover:bg-indigo-700"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              ))}

              {getSuggestedFixes(selectedError).length === 0 && (
                <div className="text-center text-gray-500 py-4">
                  No automatic fixes available for this error.
                </div>
              )}
            </div>

            <div className="flex items-center justify-end space-x-3">
              <button
                onClick={() => {
                  setSelectedError(null);
                  setShowFixModal(false);
                }}
                className="px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded hover:bg-gray-200"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default ValidationErrorDisplay;
