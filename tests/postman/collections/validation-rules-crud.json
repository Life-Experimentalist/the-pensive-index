{
    "info": {
        "name": "Validation Rules CRUD",
        "description": "Comprehensive API tests for validation rule CRUD operations",
        "version": "1.0.0",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Create Validation Rule",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Set up test data",
                            "const testRuleName = 'Test Rule ' + Math.random().toString(36).substr(2, 9);",
                            "pm.environment.set('testRuleName', testRuleName);",
                            "",
                            "// Performance tracking",
                            "pm.environment.set('requestStartTime', new Date().getTime());"
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "// Performance assertion",
                            "const startTime = pm.environment.get('requestStartTime');",
                            "const endTime = new Date().getTime();",
                            "const responseTime = endTime - startTime;",
                            "const performanceTarget = parseInt(pm.environment.get('performanceTarget')) || 100;",
                            "",
                            "pm.test('Response time is within performance target', function () {",
                            "    pm.expect(responseTime).to.be.below(performanceTarget);",
                            "});",
                            "",
                            "// Status code validation",
                            "pm.test('Status code is 201', function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "// Response schema validation",
                            "pm.test('Response has valid schema', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('id');",
                            "    pm.expect(jsonData).to.have.property('name');",
                            "    pm.expect(jsonData).to.have.property('fandomId');",
                            "    pm.expect(jsonData).to.have.property('ruleType');",
                            "    pm.expect(jsonData).to.have.property('conditions');",
                            "    pm.expect(jsonData).to.have.property('actions');",
                            "    pm.expect(jsonData).to.have.property('severity');",
                            "    pm.expect(jsonData).to.have.property('isActive');",
                            "    pm.expect(jsonData).to.have.property('priority');",
                            "    pm.expect(jsonData).to.have.property('version');",
                            "    pm.expect(jsonData).to.have.property('createdAt');",
                            "    pm.expect(jsonData).to.have.property('updatedAt');",
                            "});",
                            "",
                            "// Validation rule business logic tests",
                            "pm.test('Rule has correct default values', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.isActive).to.equal(false);",
                            "    pm.expect(jsonData.version).to.equal(1);",
                            "    pm.expect(jsonData.priority).to.be.a('number');",
                            "});",
                            "",
                            "pm.test('Conditions and actions are arrays', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.conditions).to.be.an('array');",
                            "    pm.expect(jsonData.actions).to.be.an('array');",
                            "    pm.expect(jsonData.conditions.length).to.be.greaterThan(0);",
                            "    pm.expect(jsonData.actions.length).to.be.greaterThan(0);",
                            "});",
                            "",
                            "// Store rule ID for subsequent tests",
                            "if (pm.response.code === 201) {",
                            "    const jsonData = pm.response.json();",
                            "    pm.environment.set('testRuleId', jsonData.id);",
                            "}"
                        ]
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{adminToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"fandomId\": \"{{fandomId}}\",\n  \"name\": \"{{testRuleName}}\",\n  \"description\": \"Test validation rule for Harry Potter shipping constraints\",\n  \"ruleType\": \"exclusivity\",\n  \"severity\": \"error\",\n  \"message\": \"Harry cannot have multiple romantic partners in this story\",\n  \"priority\": 100,\n  \"conditions\": [\n    {\n      \"conditionType\": \"tag_count\",\n      \"targetType\": \"tag\",\n      \"targetIds\": [\"harry-hermione\", \"harry-ginny\", \"harry-luna\"],\n      \"operator\": \"greater_than\",\n      \"value\": 1,\n      \"logicOperator\": \"AND\",\n      \"orderIndex\": 0\n    }\n  ],\n  \"actions\": [\n    {\n      \"actionType\": \"show_message\",\n      \"targetType\": \"message\",\n      \"parameters\": {\n        \"messageText\": \"Please select only one romantic partner for Harry Potter\"\n      },\n      \"orderIndex\": 0\n    }\n  ]\n}"
                },
                "url": {
                    "raw": "{{validationApiUrl}}/validation-rules",
                    "host": [
                        "{{validationApiUrl}}"
                    ],
                    "path": [
                        "validation-rules"
                    ]
                }
            }
        },
        {
            "name": "Get All Validation Rules",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Response is an array', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.be.an('array');",
                            "});",
                            "",
                            "pm.test('Rules have required properties', function () {",
                            "    const jsonData = pm.response.json();",
                            "    if (jsonData.length > 0) {",
                            "        const rule = jsonData[0];",
                            "        pm.expect(rule).to.have.property('id');",
                            "        pm.expect(rule).to.have.property('name');",
                            "        pm.expect(rule).to.have.property('fandomId');",
                            "        pm.expect(rule).to.have.property('isActive');",
                            "    }",
                            "});",
                            "",
                            "pm.test('Fandom scoping works', function () {",
                            "    const jsonData = pm.response.json();",
                            "    const fandomId = pm.environment.get('fandomId');",
                            "    jsonData.forEach(rule => {",
                            "        pm.expect(rule.fandomId).to.equal(fandomId);",
                            "    });",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{authToken}}"
                    }
                ],
                "url": {
                    "raw": "{{validationApiUrl}}/validation-rules?fandomId={{fandomId}}",
                    "host": [
                        "{{validationApiUrl}}"
                    ],
                    "path": [
                        "validation-rules"
                    ],
                    "query": [
                        {
                            "key": "fandomId",
                            "value": "{{fandomId}}"
                        }
                    ]
                }
            }
        },
        {
            "name": "Get Validation Rule by ID",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Response has complete rule data', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('id');",
                            "    pm.expect(jsonData).to.have.property('conditions');",
                            "    pm.expect(jsonData).to.have.property('actions');",
                            "    pm.expect(jsonData.conditions).to.be.an('array');",
                            "    pm.expect(jsonData.actions).to.be.an('array');",
                            "});",
                            "",
                            "pm.test('Rule conditions have proper structure', function () {",
                            "    const jsonData = pm.response.json();",
                            "    if (jsonData.conditions.length > 0) {",
                            "        const condition = jsonData.conditions[0];",
                            "        pm.expect(condition).to.have.property('conditionType');",
                            "        pm.expect(condition).to.have.property('targetType');",
                            "        pm.expect(condition).to.have.property('operator');",
                            "        pm.expect(condition).to.have.property('orderIndex');",
                            "    }",
                            "});",
                            "",
                            "pm.test('Rule actions have proper structure', function () {",
                            "    const jsonData = pm.response.json();",
                            "    if (jsonData.actions.length > 0) {",
                            "        const action = jsonData.actions[0];",
                            "        pm.expect(action).to.have.property('actionType');",
                            "        pm.expect(action).to.have.property('targetType');",
                            "        pm.expect(action).to.have.property('orderIndex');",
                            "    }",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{authToken}}"
                    }
                ],
                "url": {
                    "raw": "{{validationApiUrl}}/validation-rules/{{testRuleId}}",
                    "host": [
                        "{{validationApiUrl}}"
                    ],
                    "path": [
                        "validation-rules",
                        "{{testRuleId}}"
                    ]
                }
            }
        },
        {
            "name": "Update Validation Rule",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Status code is 200', function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test('Rule version incremented', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.version).to.be.greaterThan(1);",
                            "});",
                            "",
                            "pm.test('Updated fields reflect changes', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.description).to.include('Updated');",
                            "    pm.expect(jsonData.priority).to.equal(200);",
                            "});",
                            "",
                            "pm.test('updatedAt timestamp changed', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData.updatedAt).to.not.equal(jsonData.createdAt);",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "PUT",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{adminToken}}"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"description\": \"Updated test validation rule for Harry Potter shipping constraints\",\n  \"priority\": 200,\n  \"message\": \"Updated: Harry cannot have multiple romantic partners in this story\"\n}"
                },
                "url": {
                    "raw": "{{validationApiUrl}}/validation-rules/{{testRuleId}}",
                    "host": [
                        "{{validationApiUrl}}"
                    ],
                    "path": [
                        "validation-rules",
                        "{{testRuleId}}"
                    ]
                }
            }
        },
        {
            "name": "Delete Validation Rule",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Status code is 204', function () {",
                            "    pm.response.to.have.status(204);",
                            "});",
                            "",
                            "pm.test('Response body is empty', function () {",
                            "    pm.expect(pm.response.text()).to.be.empty;",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "DELETE",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{adminToken}}"
                    }
                ],
                "url": {
                    "raw": "{{validationApiUrl}}/validation-rules/{{testRuleId}}",
                    "host": [
                        "{{validationApiUrl}}"
                    ],
                    "path": [
                        "validation-rules",
                        "{{testRuleId}}"
                    ]
                }
            }
        },
        {
            "name": "Verify Rule Deletion",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Status code is 404', function () {",
                            "    pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test('Error message indicates not found', function () {",
                            "    const jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('error');",
                            "    pm.expect(jsonData.error.toLowerCase()).to.include('not found');",
                            "});"
                        ]
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{authToken}}"
                    }
                ],
                "url": {
                    "raw": "{{validationApiUrl}}/validation-rules/{{testRuleId}}",
                    "host": [
                        "{{validationApiUrl}}"
                    ],
                    "path": [
                        "validation-rules",
                        "{{testRuleId}}"
                    ]
                }
            }
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global pre-request setup",
                    "if (!pm.environment.get('validationApiUrl')) {",
                    "    throw new Error('validationApiUrl environment variable not set');",
                    "}",
                    "",
                    "if (!pm.environment.get('fandomId')) {",
                    "    throw new Error('fandomId environment variable not set');",
                    "}"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test assertions",
                    "pm.test('Response has correct Content-Type', function () {",
                    "    if (pm.response.code !== 204) {",
                    "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "    }",
                    "});",
                    "",
                    "pm.test('No server errors', function () {",
                    "    pm.expect(pm.response.code).to.be.below(500);",
                    "});"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "testRuleId",
            "value": "",
            "type": "string"
        },
        {
            "key": "testRuleName",
            "value": "",
            "type": "string"
        }
    ]
}